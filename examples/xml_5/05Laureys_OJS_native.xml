<?xml version="1.0"?>
<article xmlns="http://pkp.sfu.ca" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" status="3" submission_progress="0" stage="production" current_publication_id="1" date_submitted="2022-12-31">
 <id type="internal" advice="ignore">100</id>
 <submission_file xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="100" file_id="100" stage="proof" viewable="false" genre="Article Text" uploader="ojschris" xsi:schemaLocation="http://pkp.sfu.ca native.xsd">
  <name locale="en_US">ojschris, 05Laureys.xml</name>
  <file id="100" filesize="131180" extension="xml">
   <embed encoding="base64"></embed>
  </file>
 </submission_file>
 <publication xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" locale="en_US" version="1" status="3" date_published="2022-12-31" section_ref="CONF" seq="0">
  <id type="internal" advice="ignore">100</id>
  <id type="doi" advice="update">10.48431/hsah.0105</id>
  <title locale="en_US">'Illustrating' Italy: Biondo's Concept of Illustratio</title>
  <subtitle locale="en_US"></subtitle>
  <abstract locale="en_US">The Italia illustrata of Biondo Flavio logically presupposes an 'illustratio' of Italy, but Biondo's notion of 'illustratio' has hardly ever been discussed in detail. This article explores the various dimensions of this concept and tries to show how they help to elucidate Biondo's working method in his Italia illustrata. Such an analysis also intends to contribute to a better understanding of the scope and nature of the Italia illustrata, the most original and most personal among Biondo's major treatises. The multi-faceted idea of 'illustratio' informs, in particular, the innovative interlocking of space and history, evident in the Italia illustrata. Finally, Biondo's conception of 'illustratio' can also be used as a yardstick for measuring the precise extent of the reception and influence of the Italia illustrata on the development of historical geography, sometimes connected with Biondo in an all too perfunctory manner.</abstract>
  <licenseUrl>https://creativecommons.org/licenses/by/4.0/</licenseUrl>
  <copyrightHolder locale="en_US">Bibliotheca Hertziana - Max Planck Institute for Art History</copyrightHolder>
  <copyrightYear>2022</copyrightYear>
  <authors xmlns="http://pkp.sfu.ca" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <author user_group_ref="Author" primary_contact="true" seq="0" id="100">
    <givenname locale="en_US">Marc</givenname>
    <familyname locale="en_US">Laureys</familyname>
    <affiliation locale="en_US">University of Bonn, Institut f"ur Klassische und Romanische Philologie</affiliation>
    <email>m.laureys@uni-bonn.de</email>
   </author>
  </authors>
  <article_galley xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" locale="en_US" approved="false" xsi:schemaLocation="http://pkp.sfu.ca native.xsd">
   <id type="internal" advice="ignore">100</id>
   <name locale="en_US">XML</name>
   <seq>0</seq>
   <submission_file_ref id="100"/>
  </article_galley>
  <pages>-</pages>
 </publication>
</article>
