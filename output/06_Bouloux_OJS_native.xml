<?xml version="1.0"?>
<article xmlns="http://pkp.sfu.ca" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" status="3" submission_progress="0" stage="production" current_publication_id="1" date_submitted="2022-12-31">
 <id type="internal" advice="ignore">100</id>
 <submission_file xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="100" file_id="100" stage="proof" viewable="false" genre="Article Text" uploader="ojschris" xsi:schemaLocation="http://pkp.sfu.ca native.xsd">
  <name locale="en_US">ojschris, 06_Bouloux.xml</name>
  <file id="100" filesize="113200" extension="xml">
   <embed encoding="base64"></embed>
  </file>
 </submission_file>
 <publication xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" locale="en_US" version="1" status="3" date_published="2022-12-31" section_ref="CONF" seq="0">
  <id type="internal" advice="ignore">100</id>
  <id type="doi" advice="update">10.48431/hsah.0106</id>
  <title locale="en_US">L'usage des cartes dans l'Itala Illustrata de de Biondo Flavio</title>
  <subtitle locale="en_US">L'usage des cartes</subtitle>
  <abstract locale="en_US">Biondo Flavio's Italia Illustrata is a remarkable work from the
                    15th century that exemplifies the geographical culture of humanism. Commissioned
                    by Alphonse of Aragon, it aims to catalog illustrious figures in Italy but goes
                    beyond by meticulously describing the Italian landscape and celebrating its
                    connection to ancient Rome. This article examines three aspects of
                        : the text's composition, the types of
                    maps mentioned, and their significance in Biondo's work. By analyzing his
                    sources and methods, we gain insights into the humanist's approach to portraying
                    Italy's past and present.</abstract>
  <licenseUrl>https://creativecommons.org/licenses/by/4.0/</licenseUrl>
  <copyrightHolder>Bibliotheca Hertziana - Max Planck Institute for Art
                    History</copyrightHolder>
  <copyrightYear>2022</copyrightYear>
  <keywords locale="en_US">
   <keyword>Antique geography</keyword>
   <keyword>maps</keyword>
   <keyword>measurements</keyword>
   <keyword>Biondo</keyword>
  </keywords>
  <authors xmlns="http://pkp.sfu.ca" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <author user_group_ref="Author" primary_contact="true" seq="0" id="100">
    <givenname locale="en_US">Nathalie</givenname>
    <familyname locale="en_US">Bouloux</familyname>
    <affiliation locale="en_US">D'epartement
                        d'histoire et d'arch'eologie, Universit'e de
                        Tours</affiliation>
    <email>nathalie.bouloux@univ-tours.fr</email>
   </author>
  </authors>
  <article_galley xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" locale="en_US" approved="false" xsi:schemaLocation="http://pkp.sfu.ca native.xsd">
   <id type="internal" advice="ignore">100</id>
   <name locale="en_US">XML</name>
   <seq>0</seq>
   <submission_file_ref id="100"/>
  </article_galley>
  <issue_identification>
   <volume>1</volume>
   <number></number>
   <year>2022</year>
   <title locale="en_US">Hertziana Studies in Art History</title>
  </issue_identification>
  <pages>-</pages>
 </publication>
</article>
