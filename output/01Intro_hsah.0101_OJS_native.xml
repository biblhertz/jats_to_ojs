<?xml version="1.0"?>
<article xmlns="http://pkp.sfu.ca" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" status="3" submission_progress="0" stage="production" current_publication_id="1" date_submitted="2022-12-31">
 <id type="internal" advice="ignore">100</id>
 <submission_file xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="100" file_id="100" stage="proof" viewable="false" genre="Article Text" uploader="ojschris" xsi:schemaLocation="http://pkp.sfu.ca native.xsd">
  <name locale="en_US">ojschris, 01Intro_hsah.0101.xml</name>
  <file id="100" filesize="33537" extension="xml">
   <embed encoding="base64"></embed>
  </file>
 </submission_file>
 <submission_file xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="101" file_id="101" stage="proof" viewable="false" genre="Article Text" uploader="ojschris" xsi:schemaLocation="http://pkp.sfu.ca native.xsd">
  <name locale="en_US">ojschris, 10.1515_bgsl.2005.141.pdf</name>
  <file id="101" filesize="" extension="pdf">
   <embed encoding="base64"></embed>
  </file>
 </submission_file>
 <submission_file xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="102" file_id="102" stage="proof" viewable="false" genre="Article Text" uploader="ojschris" xsi:schemaLocation="http://pkp.sfu.ca native.xsd">
  <name locale="en_US">ojschris, manuscript.0105.html</name>
  <file id="102" filesize="" extension="html">
   <embed encoding="base64"></embed>
  </file>
 </submission_file>
 <publication xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" locale="en_US" version="1" status="3" date_published="2022-12-31" section_ref="CONF" seq="0">
  <id type="internal" advice="ignore">100</id>
  <id type="doi" advice="update">10.48431/hsah.0101</id>
  <title locale="en_US">Walking through history. An Interdisciplinary Approach to Flavio Biondo's Spaces in the "Italia Illustrata"</title>
  <subtitle locale="en_US"></subtitle>
  <abstract locale="en_US">The  of Biondo Flavio logically presupposes an 'illustratio' of Italy, but Biondo's notion of 'illustratio' has hardly ever been discussed in detail. This article explores the various dimensions of this concept and tries to show how they help to elucidate Biondo's working method in his . Such an analysis also intends to contribute to a better understanding of the scope and nature of the , the most original and most personal among Biondo's major treatises. The multi-faceted idea of 'illustratio' informs, in particular, the innovative interlocking of space and history, evident in the . Finally, Biondo's conception of 'illustratio' can also be used as a yardstick for measuring the precise extent of the reception and influence of the  on the development of historical geography, sometimes connected with Biondo in an all too perfunctory manner.</abstract>
  <licenseUrl>https://creativecommons.org/licenses/by/4.0/</licenseUrl>
  <copyrightHolder locale="en_US">Bibliotheca Hertziana - Max Planck Institute for Art History</copyrightHolder>
  <copyrightYear>2022</copyrightYear>
  <authors xmlns="http://pkp.sfu.ca" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <author user_group_ref="Author" primary_contact="true" seq="0" id="100">
    <givenname locale="en_US">Tanja</givenname>
    <familyname locale="en_US">Michalsky</familyname>
    <affiliation locale="en_US">, Bibliotheca Hertziana - Max Planck Institute for Art History</affiliation>
    <email>tanja.michalsky@biblhertz.it</email>
   </author>
   <author user_group_ref="Author" seq="1" id="100">
    <givenname locale="en_US">Martin</givenname>
    <familyname locale="en_US">Thiering</familyname>
    <affiliation locale="en_US">Departement of Art and Design, University of Europe for Applied Sciences Campus Berlin</affiliation>
    <email>thiering@ue-germany.de</email>
   </author>
  </authors>
  <article_galley xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" locale="en_US" approved="false" xsi:schemaLocation="http://pkp.sfu.ca native.xsd">
   <id type="internal" advice="ignore">100</id>
   <name locale="en_US">XML</name>
   <seq>0</seq>
   <submission_file_ref id="100"/>
  </article_galley>
  <article_galley xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" locale="en_US" approved="false" xsi:schemaLocation="http://pkp.sfu.ca native.xsd">
   <id type="internal" advice="ignore">100</id>
   <name locale="en_US">PDF</name>
   <seq>0</seq>
   <submission_file_ref id="101"/>
  </article_galley>
  <article_galley xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" locale="en_US" approved="false" xsi:schemaLocation="http://pkp.sfu.ca native.xsd">
   <id type="internal" advice="ignore">100</id>
   <name locale="en_US">HTML</name>
   <seq>0</seq>
   <submission_file_ref id="102"/>
  </article_galley>
  <pages>-</pages>
  <covers>
   <cover locale="en_US">
    <cover_image>02_Harvey.jpg</cover_image>
    <cover_image_alt_text>Cover Image File for this article</cover_image_alt_text>
    <embed encoding="base64"></embed>
   </cover>
  </covers>
 </publication>
</article>
